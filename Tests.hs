{-# LANGUAGE CPP, ScopedTypeVariables #-}

import Control.Exception (SomeException, try)
import Data.Set (Set)
import Data.Set.Extra (gFind)
import Language.Haskell.Exts (defaultParseMode, parseFileWithComments, ParseResult(..))
import Language.Haskell.Exts.Comments (Comment)
import Language.Haskell.Exts.Syntax
import Language.Haskell.Imports.Common (untabify, withCurrentDirectory)
import Language.Haskell.Imports.Fold as Fold (tests)
import Language.Haskell.Imports.SrcLoc as SrcLoc (tests)
import Test.HUnit (runTestTT, Test(TestList))

main =
    do counts <- runTestTT (TestList [Fold.tests, SrcLoc.tests])
       putStrLn (show counts)

withTestData :: (Module -> [Comment] -> String -> IO r) -> FilePath -> IO r
withTestData f path = withCurrentDirectory "testdata" $
    do text <- try (readFile path)
       source <- try (parseFileWithComments defaultParseMode path)
       case (text, source) of
         (Right text', Right (ParseOk (m, comments))) ->
             f m comments (untabify text')
         (Right _, Right _) -> error "parse failure"
         (Left (e :: SomeException), _) -> error $ "failure: " ++ show e
         (_, Left (e :: SomeException)) -> error $ "failure: " ++ show e

withTestModule :: (Module -> IO r) -> FilePath -> IO r
withTestModule f path = withTestData (\ m _ _ -> f m) path

foo :: IO (Set Name)
foo = withTestModule (return . gFind) "Debian/Repo/Package.hs"

bar :: IO (Set QName)
bar = withTestModule (return . gFind) "Debian/Repo/Package.hs"

#if 0
    -- This is just to look at
     (Module
          (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 2, srcColumn = 1})
          (ModuleName "Debian.Repo.AptCache")
          [LanguagePragma (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 2, srcColumn = 1}) [Ident "DeriveDataTypeable",Ident "PackageImports"],OptionsPragma (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 3, srcColumn = 1}) Nothing "-fno-warn-orphans "]
          (Just (WarnText "this is a warning"))
          (Just [EThingAll (UnQual (Ident "SourcesChangedAction")),EVar (UnQual (Ident "aptSourcePackagesSorted")),EVar (UnQual (Ident "sliceIndexes")),EVar (UnQual (Ident "cacheDistDir")),EVar (UnQual (Ident "distDir")),EVar (UnQual (Ident "aptDir")),EVar (UnQual (Ident "cacheRootDir")),EVar (UnQual (Ident "cacheSourcesPath")),EVar (UnQual (Ident "sourcesPath")),EVar (UnQual (Ident "sourceDir")),EVar (UnQual (Ident "aptCacheFiles")),EVar (UnQual (Ident "aptCacheFilesOfSlice")),EVar (UnQual (Ident "archFiles")),EVar (UnQual (Ident "buildArchOfEnv")),EVar (UnQual (Ident "buildArchOfRoot")),EVar (UnQual (Ident "updateCacheSources")),EVar (UnQual (Ident "sourcePackages")),EVar (UnQual (Ident "binaryPackages")),EVar (UnQual (Ident "runAptGet")),EVar (UnQual (Ident "aptOpts")),EVar (UnQual (Ident "getSourcePackagesBase")),EVar (UnQual (Ident "getBinaryPackagesBase")),EVar (UnQual (Ident "getSourcePackagesBuild")),EVar (UnQual (Ident "getBinaryPackagesBuild"))])
          [ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 34, srcColumn = 1}, importModule = ModuleName "Control.DeepSeq", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "force"),IAbs (Ident "NFData")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 35, srcColumn = 1}, importModule = ModuleName "Control.Monad.Trans", importQualified = False, importSrc = False, importPkg = Just "mtl", importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "MonadIO")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 36, srcColumn = 1}, importModule = ModuleName "Data.ByteString.Lazy", importQualified = True, importSrc = False, importPkg = Nothing, importAs = Just (ModuleName "L"), importSpecs = Just (False,[IVar (Ident "empty")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 37, srcColumn = 1}, importModule = ModuleName "Data.Data", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "Data")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 38, srcColumn = 1}, importModule = ModuleName "Data.List", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "intercalate"),IVar (Ident "sortBy")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 39, srcColumn = 1}, importModule = ModuleName "Data.Typeable", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "Typeable")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 40, srcColumn = 1}, importModule = ModuleName "Debian.Arch", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "Arch"),IThingAll (Ident "ArchCPU"),IThingAll (Ident "ArchOS"),IVar (Ident "prettyArch")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 41, srcColumn = 1}, importModule = ModuleName "Debian.Relation", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "BinPkgName"),IAbs (Ident "PkgName"),IThingAll (Ident "SrcPkgName")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 42, srcColumn = 1}, importModule = ModuleName "Debian.Release", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "ReleaseName") [VarName (Ident "relName")],IVar (Ident "releaseName'"),IVar (Ident "sectionName'")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 43, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Monads.Apt", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "MonadApt")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 44, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Package", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "binaryPackagesOfCachedIndex"),IVar (Ident "sourcePackagesOfCachedIndex")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 45, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Slice", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "binarySlices"),IVar (Ident "sourceSlices"),IVar (Ident "verifySourcesList")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 46, srcColumn = 1}, importModule = ModuleName "Debian.Repo.SourcesList", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "parseSourcesList")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 47, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.AptBuildCache", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "AptBuildCache") [VarName (Ident "aptSliceList")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 48, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.AptCache", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "AptCache"),IThingWith (Ident "AptCache") [VarName (Ident "aptArch"),VarName (Ident "aptBaseSliceList"),VarName (Ident "aptBinaryPackages"),VarName (Ident "aptReleaseName"),VarName (Ident "aptSourcePackages"),VarName (Ident "globalCacheDir")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 49, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.EnvPath", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "EnvRoot"),IThingWith (Ident "EnvRoot") [ConName (Ident "EnvRoot")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 50, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.PackageIndex", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "BinaryPackage") [VarName (Ident "packageID")],IVar (Ident "binaryPackageName"),IThingWith (Ident "PackageID") [VarName (Ident "packageVersion")],IThingAll (Ident "PackageIndex"),IThingWith (Ident "SourcePackage") [VarName (Ident "sourcePackageID")],IVar (Ident "sourcePackageName")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 51, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.Release", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "Release") [VarName (Ident "releaseName")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 52, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.Repo", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "Repo") [VarName (Ident "repoReleaseInfo")],IVar (Ident "repoKey"),IAbs (Ident "RepoKey")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 53, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.Repository", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "MonadRepoCache"),IVar (Ident "prepareRepository")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 54, srcColumn = 1}, importModule = ModuleName "Debian.Repo.Types.Slice", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "Slice"),IThingWith (Ident "SliceList") [VarName (Ident "slices")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 55, srcColumn = 1}, importModule = ModuleName "Debian.Sources", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingAll (Ident "DebSource"),IThingAll (Ident "SourceType")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 56, srcColumn = 1}, importModule = ModuleName "Debian.Version", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IAbs (Ident "DebianVersion"),IVar (Ident "prettyDebianVersion")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 57, srcColumn = 1}, importModule = ModuleName "Extra.Files", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "replaceFile")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 58, srcColumn = 1}, importModule = ModuleName "Network.URI", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "escapeURIString"),IThingWith (Ident "URI") [VarName (Ident "uriAuthority"),VarName (Ident "uriPath"),VarName (Ident "uriScheme")],IThingWith (Ident "URIAuth") [VarName (Ident "uriPort"),VarName (Ident "uriRegName"),VarName (Ident "uriUserInfo")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 59, srcColumn = 1}, importModule = ModuleName "System.Directory", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "createDirectoryIfMissing"),IVar (Ident "doesFileExist"),IVar (Ident "removeFile")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 60, srcColumn = 1}, importModule = ModuleName "System.Exit", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IThingWith (Ident "ExitCode") [ConName (Ident "ExitSuccess")]])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 61, srcColumn = 1}, importModule = ModuleName "System.FilePath", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Symbol "</>")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 62, srcColumn = 1}, importModule = ModuleName "System.IO", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "hGetLine"),IVar (Ident "stdin")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 63, srcColumn = 1}, importModule = ModuleName "System.Posix.Env", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "setEnv")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 64, srcColumn = 1}, importModule = ModuleName "System.Process", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "readProcessWithExitCode"),IVar (Ident "shell")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 65, srcColumn = 1}, importModule = ModuleName "System.Process.Progress", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "ePutStr"),IVar (Ident "ePutStrLn"),IVar (Ident "qPutStrLn"),IVar (Ident "runProcessF")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 66, srcColumn = 1}, importModule = ModuleName "System.Unix.Chroot", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "useEnv")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 67, srcColumn = 1}, importModule = ModuleName "System.Unix.Directory", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "removeRecursiveSafely")])},ImportDecl {importLoc = SrcLoc {srcFilename = "<unknown>.hs", srcLine = 68, srcColumn = 1}, importModule = ModuleName "Text.PrettyPrint.ANSI.Leijen", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (False,[IVar (Ident "pretty")])}]
          [InstDecl (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 70, srcColumn = 1}) [] (UnQual (Ident "NFData")) [TyCon (UnQual (Ident "ExitCode"))] [],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 79, srcColumn = 1}) [Ident "cacheDistDir"] (TyFun (TyCon (UnQual (Ident "FilePath"))) (TyFun (TyCon (UnQual (Ident "ReleaseName"))) (TyCon (UnQual (Ident "FilePath"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 80, srcColumn = 1}) (Ident "cacheDistDir") [PVar (Ident "cacheDir"),PVar (Ident "release")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "cacheDir"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/dists/")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "relName"))) (Var (UnQual (Ident "release"))))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 82, srcColumn = 1}) [Ident "cacheRootDir"] (TyFun (TyCon (UnQual (Ident "FilePath"))) (TyFun (TyCon (UnQual (Ident "ReleaseName"))) (TyCon (UnQual (Ident "EnvRoot"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 83, srcColumn = 1}) (Ident "cacheRootDir") [PVar (Ident "cacheDir"),PVar (Ident "release")] Nothing (UnGuardedRhs (App (Con (UnQual (Ident "EnvRoot"))) (Paren (InfixApp (App (App (Var (UnQual (Ident "cacheDistDir"))) (Var (UnQual (Ident "cacheDir")))) (Var (UnQual (Ident "release")))) (QVarOp (UnQual (Symbol "++"))) (Lit (String "/aptEnv")))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 85, srcColumn = 1}) [Ident "distDir"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "c")]] (TyFun (TyVar (Ident "c")) (TyCon (UnQual (Ident "FilePath"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 86, srcColumn = 1}) (Ident "distDir") [PVar (Ident "cache")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "cacheDistDir"))) (Paren (App (Var (UnQual (Ident "globalCacheDir"))) (Var (UnQual (Ident "cache")))))) (Paren (App (Var (UnQual (Ident "aptReleaseName"))) (Var (UnQual (Ident "cache"))))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 88, srcColumn = 1}) [Ident "aptDir"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "c")]] (TyFun (TyVar (Ident "c")) (TyFun (TyCon (UnQual (Ident "SrcPkgName"))) (TyCon (UnQual (Ident "FilePath")))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 89, srcColumn = 1}) (Ident "aptDir") [PVar (Ident "cache"),PVar (Ident "package")] Nothing (UnGuardedRhs (InfixApp (App (Var (UnQual (Ident "distDir"))) (Var (UnQual (Ident "cache")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/apt/")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "unSrcPkgName"))) (Var (UnQual (Ident "package"))))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 92, srcColumn = 1}) [Ident "cacheSourcesPath"] (TyFun (TyCon (UnQual (Ident "FilePath"))) (TyFun (TyCon (UnQual (Ident "ReleaseName"))) (TyCon (UnQual (Ident "FilePath"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 93, srcColumn = 1}) (Ident "cacheSourcesPath") [PVar (Ident "cacheDir"),PVar (Ident "release")] Nothing (UnGuardedRhs (InfixApp (App (App (Var (UnQual (Ident "cacheDistDir"))) (Var (UnQual (Ident "cacheDir")))) (Var (UnQual (Ident "release")))) (QVarOp (UnQual (Symbol "</>"))) (Lit (String "sources")))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 95, srcColumn = 1}) [Ident "sourcesPath"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "c")]] (TyFun (TyVar (Ident "c")) (TyCon (UnQual (Ident "FilePath"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 96, srcColumn = 1}) (Ident "sourcesPath") [PVar (Ident "cache")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "cacheSourcesPath"))) (Paren (App (Var (UnQual (Ident "globalCacheDir"))) (Var (UnQual (Ident "cache")))))) (Paren (App (Var (UnQual (Ident "aptReleaseName"))) (Var (UnQual (Ident "cache"))))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 103, srcColumn = 1}) [Ident "sourceDir"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "t")]] (TyFun (TyVar (Ident "t")) (TyFun (TyCon (UnQual (Ident "String"))) (TyCon (UnQual (Ident "FilePath")))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 104, srcColumn = 1}) (Ident "sourceDir") [PVar (Ident "c"),PVar (Ident "package")] Nothing (UnGuardedRhs (InfixApp (App (Var (UnQual (Ident "distDir"))) (Var (UnQual (Ident "c")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/apt/")) (QVarOp (UnQual (Symbol "++"))) (Var (UnQual (Ident "package")))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 107, srcColumn = 1}) [Ident "aptSourcePackagesSorted"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "t")]] (TyFun (TyVar (Ident "t")) (TyFun (TyList (TyCon (UnQual (Ident "SrcPkgName")))) (TyList (TyCon (UnQual (Ident "SourcePackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 108, srcColumn = 1}) (Ident "aptSourcePackagesSorted") [PVar (Ident "os"),PVar (Ident "names")] Nothing (UnGuardedRhs (InfixApp (InfixApp (App (Var (UnQual (Ident "sortBy"))) (Var (UnQual (Ident "cmp")))) (QVarOp (UnQual (Symbol "."))) (InfixApp (App (Var (UnQual (Ident "filterNames"))) (Var (UnQual (Ident "names")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptSourcePackages"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os"))))) (BDecls [FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 111, srcColumn = 7}) (Ident "filterNames") [PVar (Ident "names'"),PVar (Ident "packages")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "filter"))) (Paren (InfixApp (App (App (Var (UnQual (Ident "flip"))) (Var (UnQual (Ident "elem")))) (Var (UnQual (Ident "names'")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageName")))))) (Var (UnQual (Ident "packages"))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 113, srcColumn = 7}) (Ident "cmp") [PVar (Ident "p1"),PVar (Ident "p2")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "compare"))) (Var (UnQual (Ident "v2")))) (Var (UnQual (Ident "v1"))))) (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 116, srcColumn = 13}) (PVar (Ident "v1")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p1"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 117, srcColumn = 13}) (PVar (Ident "v2")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p2"))))) (BDecls [])])]])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 121, srcColumn = 1}) [Ident "sliceIndexes"] (TyForall Nothing [ClassA (UnQual (Ident "MonadRepoCache")) [TyVar (Ident "m")],ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")]] (TyFun (TyVar (Ident "a")) (TyFun (TyCon (UnQual (Ident "Slice"))) (TyApp (TyVar (Ident "m")) (TyList (TyTuple Boxed [TyCon (UnQual (Ident "RepoKey")),TyCon (UnQual (Ident "Release")),TyCon (UnQual (Ident "PackageIndex"))])))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 122, srcColumn = 1}) (Ident "sliceIndexes") [PVar (Ident "cache"),PVar (Ident "slice")] Nothing (UnGuardedRhs (InfixApp (App (Var (UnQual (Ident "prepareRepository"))) (Paren (App (Var (UnQual (Ident "sliceRepoKey"))) (Var (UnQual (Ident "slice")))))) (QVarOp (UnQual (Symbol ">>="))) (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 123, srcColumn = 48}) [PVar (Ident "repo")] (Case (Paren (App (Var (UnQual (Ident "sourceDist"))) (Paren (App (Var (UnQual (Ident "sliceSource"))) (Var (UnQual (Ident "slice"))))))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 125, srcColumn = 7}) (PApp (UnQual (Ident "Left")) [PVar (Ident "exact")]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Can't handle exact path in sources.list: ")) (QVarOp (UnQual (Symbol "++"))) (Var (UnQual (Ident "exact")))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 126, srcColumn = 7}) (PApp (UnQual (Ident "Right")) [PTuple [PVar (Ident "release"),PVar (Ident "sections")]]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "map"))) (Paren (App (App (Var (UnQual (Ident "makeIndex"))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "release")))))) (Var (UnQual (Ident "sections")))))) (BDecls [])])))) (BDecls [FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 128, srcColumn = 7}) (Ident "makeIndex") [PVar (Ident "repo"),PVar (Ident "release"),PVar (Ident "section")] Nothing (UnGuardedRhs (Tuple [App (Var (UnQual (Ident "repoKey"))) (Var (UnQual (Ident "repo"))),App (App (Var (UnQual (Ident "findReleaseInfo"))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "release"))),RecConstr (UnQual (Ident "PackageIndex")) [FieldUpdate (UnQual (Ident "packageIndexComponent")) (Var (UnQual (Ident "section"))),FieldUpdate (UnQual (Ident "packageIndexArch")) (Case (Paren (App (Var (UnQual (Ident "sourceType"))) (Paren (App (Var (UnQual (Ident "sliceSource"))) (Var (UnQual (Ident "slice"))))))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 133, srcColumn = 48}) (PApp (UnQual (Ident "DebSrc")) []) (UnGuardedAlt (Con (UnQual (Ident "Source")))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 134, srcColumn = 48}) (PApp (UnQual (Ident "Deb")) []) (UnGuardedAlt (App (Var (UnQual (Ident "aptArch"))) (Var (UnQual (Ident "cache"))))) (BDecls [])])]])) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 135, srcColumn = 7}) (Ident "findReleaseInfo") [PVar (Ident "repo"),PVar (Ident "release")] Nothing (UnGuardedRhs (Case (App (App (Var (UnQual (Ident "filter"))) (Paren (InfixApp (App (Var (UnQual (Symbol "=="))) (Var (UnQual (Ident "release")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "releaseName")))))) (Paren (App (Var (UnQual (Ident "repoReleaseInfo"))) (Var (UnQual (Ident "repo")))))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 137, srcColumn = 13}) (PList [PVar (Ident "x")]) (UnGuardedAlt (Var (UnQual (Ident "x")))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 138, srcColumn = 13}) (PList []) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Paren (InfixApp (Lit (String "sliceIndexes: Invalid release name: ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "releaseName'"))) (Var (UnQual (Ident "release")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n  You may need to remove ~/.autobuilder/repoCache.")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n  Available: ")) (QVarOp (UnQual (Symbol "++"))) (Paren (InfixApp (InfixApp (Var (UnQual (Ident "show"))) (QVarOp (UnQual (Symbol "."))) (InfixApp (App (Var (UnQual (Ident "map"))) (Var (UnQual (Ident "releaseName")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "repoReleaseInfo"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "repo")))))))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n repoKey: ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "repoKey"))) (Var (UnQual (Ident "repo")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n repoReleaseInfo: ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "repoReleaseInfo"))) (Var (UnQual (Ident "repo")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n slice: ")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Var (UnQual (Ident "slice")))))))))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 144, srcColumn = 13}) (PVar (Ident "xs")) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Internal error 5 - multiple releases named ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "releaseName'"))) (Var (UnQual (Ident "release")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Var (UnQual (Ident "xs"))))))))) (BDecls [])])) (BDecls [])]])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 147, srcColumn = 1}) [Ident "aptCacheFiles"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")]] (TyFun (TyVar (Ident "a")) (TyFun (TyList (TyCon (UnQual (Ident "DebSource")))) (TyList (TyCon (UnQual (Ident "FilePath"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 148, srcColumn = 1}) (Ident "aptCacheFiles") [PVar (Ident "apt"),PVar (Ident "sources")] Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "concat"))) (QVarOp (UnQual (Symbol "."))) (App (Var (UnQual (Ident "map"))) (Paren (App (Var (UnQual (Ident "aptCacheFilesOfSlice"))) (Var (UnQual (Ident "apt"))))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "sources"))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 151, srcColumn = 1}) [Ident "aptCacheFilesOfSlice"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")]] (TyFun (TyVar (Ident "a")) (TyFun (TyCon (UnQual (Ident "DebSource"))) (TyList (TyCon (UnQual (Ident "FilePath"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 152, srcColumn = 1}) (Ident "aptCacheFilesOfSlice") [PVar (Ident "apt"),PVar (Ident "slice")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "archFiles"))) (Paren (App (Var (UnQual (Ident "aptArch"))) (Var (UnQual (Ident "apt")))))) (Var (UnQual (Ident "slice"))))) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 156, srcColumn = 1}) [Ident "archFiles"] (TyFun (TyCon (UnQual (Ident "Arch"))) (TyFun (TyCon (UnQual (Ident "DebSource"))) (TyList (TyCon (UnQual (Ident "FilePath")))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 157, srcColumn = 1}) (Ident "archFiles") [PVar (Ident "arch"),PVar (Ident "deb")] Nothing (UnGuardedRhs (Case (Tuple [Var (UnQual (Ident "arch")),Var (UnQual (Ident "deb"))]) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 159, srcColumn = 7}) (PTuple [PApp (UnQual (Ident "Binary")) [PWildCard,PWildCard],PApp (UnQual (Ident "DebSource")) [PApp (UnQual (Ident "DebSrc")) [],PWildCard,PWildCard]]) (UnGuardedAlt (App (App (Var (UnQual (Ident "map"))) (RightSection (QVarOp (UnQual (Symbol "++"))) (Lit (String "_source_Sources")))) (Paren (App (Var (UnQual (Ident "archFiles'"))) (Var (UnQual (Ident "deb"))))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 161, srcColumn = 7}) (PTuple [PApp (UnQual (Ident "Binary")) [PVar (Ident "_os"),PVar (Ident "_cpu")],PApp (UnQual (Ident "DebSource")) [PApp (UnQual (Ident "Deb")) [],PWildCard,PWildCard]]) (UnGuardedAlt (App (App (Var (UnQual (Ident "map"))) (RightSection (QVarOp (UnQual (Symbol "++"))) (Paren (InfixApp (Lit (String "_binary-")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "prettyArch"))) (Var (UnQual (Ident "arch")))))) (QVarOp (UnQual (Symbol "++"))) (Lit (String "_Packages"))))))) (Paren (App (Var (UnQual (Ident "archFiles'"))) (Var (UnQual (Ident "deb"))))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 163, srcColumn = 7}) (PTuple [PVar (Ident "x"),PWildCard]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Invalid build architecture: ")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Var (UnQual (Ident "x"))))))) (BDecls [])])) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 165, srcColumn = 1}) [Ident "archFiles'"] (TyFun (TyCon (UnQual (Ident "DebSource"))) (TyList (TyCon (UnQual (Ident "FilePath"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 166, srcColumn = 1}) (Ident "archFiles'") [PVar (Ident "deb")] Nothing (UnGuardedRhs (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 167, srcColumn = 9}) (PVar (Ident "uri")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "sourceUri"))) (Var (UnQual (Ident "deb"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 168, srcColumn = 9}) (PVar (Ident "distro")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "sourceDist"))) (Var (UnQual (Ident "deb"))))) (BDecls [])]) (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 169, srcColumn = 9}) (PVar (Ident "scheme")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "uriScheme"))) (Var (UnQual (Ident "uri"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 170, srcColumn = 9}) (PVar (Ident "auth")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "uriAuthority"))) (Var (UnQual (Ident "uri"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 171, srcColumn = 9}) (PVar (Ident "path")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "uriPath"))) (Var (UnQual (Ident "uri"))))) (BDecls [])]) (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 172, srcColumn = 9}) (PVar (Ident "userpass")) Nothing (UnGuardedRhs (App (App (App (Var (UnQual (Ident "maybe"))) (Lit (String ""))) (Var (UnQual (Ident "uriUserInfo")))) (Var (UnQual (Ident "auth"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 173, srcColumn = 9}) (PVar (Ident "reg")) Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "maybeOfString"))) (QVarOp (UnQual (Symbol "$"))) (App (App (App (Var (UnQual (Ident "maybe"))) (Lit (String ""))) (Var (UnQual (Ident "uriRegName")))) (Var (UnQual (Ident "auth")))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 174, srcColumn = 9}) (PVar (Ident "port")) Nothing (UnGuardedRhs (App (App (App (Var (UnQual (Ident "maybe"))) (Lit (String ""))) (Var (UnQual (Ident "uriPort")))) (Var (UnQual (Ident "auth"))))) (BDecls [])]) (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 175, srcColumn = 9}) (PTuple [PVar (Ident "user"),PVar (Ident "pass")]) Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "break"))) (RightSection (QVarOp (UnQual (Symbol "=="))) (Lit (Char ':')))) (Var (UnQual (Ident "userpass"))))) (BDecls [])]) (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 176, srcColumn = 9}) (PVar (Ident "user'")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "maybeOfString"))) (Var (UnQual (Ident "user"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 177, srcColumn = 9}) (PVar (Ident "pass'")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "maybeOfString"))) (Var (UnQual (Ident "pass"))))) (BDecls [])]) (Let (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 178, srcColumn = 9}) (PVar (Ident "uriText")) Nothing (UnGuardedRhs (App (App (App (App (App (App (Var (UnQual (Ident "prefix"))) (Var (UnQual (Ident "scheme")))) (Var (UnQual (Ident "user'")))) (Var (UnQual (Ident "pass'")))) (Var (UnQual (Ident "reg")))) (Var (UnQual (Ident "port")))) (Var (UnQual (Ident "path"))))) (BDecls [])]) (App (App (App (Var (UnQual (Ident "either"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 180, srcColumn = 13}) [PVar (Ident "exact")] (List [Paren (App (App (Var (UnQual (Ident "escapeURIString"))) (RightSection (QVarOp (UnQual (Symbol "/="))) (Lit (Char '@')))) (Paren (InfixApp (Lit (String "/var/lib/apt/lists/")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "uriText"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "exact"))))))))])))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 181, srcColumn = 13}) [PTuple [PVar (Ident "dist"),PVar (Ident "sections")]] (App (App (Var (UnQual (Ident "map"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 182, srcColumn = 22}) [PVar (Ident "section")] (Paren (InfixApp (App (App (Var (UnQual (Ident "escapeURIString"))) (RightSection (QVarOp (UnQual (Symbol "/="))) (Lit (Char '@')))) (Paren (InfixApp (Lit (String "/var/lib/apt/lists/")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "uriText"))) (QVarOp (UnQual (Symbol "+?+"))) (Lit (String "dists_")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "releaseName'"))) (Var (UnQual (Ident "dist")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "_")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "sectionName'"))) (Var (UnQual (Ident "section"))))))))))) (Var (UnQual (Ident "sections"))))))) (Var (UnQual (Ident "distro"))))))))))) (BDecls [FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 190, srcColumn = 7}) (Ident "prefix") [PLit (String "http:"),PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "user")]),PApp (UnQual (Ident "Nothing")) [],PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "host")]),PVar (Ident "port"),PVar (Ident "path")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "user"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "host"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "port"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path")))))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 192, srcColumn = 7}) (Ident "prefix") [PLit (String "http:"),PWildCard,PWildCard,PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "host")]),PVar (Ident "port"),PVar (Ident "path")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "host"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "port"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path"))))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 194, srcColumn = 7}) (Ident "prefix") [PLit (String "ftp:"),PWildCard,PWildCard,PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "host")]),PWildCard,PVar (Ident "path")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "host"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path")))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 196, srcColumn = 7}) (Ident "prefix") [PLit (String "file:"),PApp (UnQual (Ident "Nothing")) [],PApp (UnQual (Ident "Nothing")) [],PApp (UnQual (Ident "Nothing")) [],PLit (String ""),PVar (Ident "path")] Nothing (UnGuardedRhs (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path"))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 198, srcColumn = 7}) (Ident "prefix") [PLit (String "ssh:"),PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "user")]),PApp (UnQual (Ident "Nothing")) [],PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "host")]),PVar (Ident "port"),PVar (Ident "path")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "user"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "host"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "port"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path")))))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 200, srcColumn = 7}) (Ident "prefix") [PLit (String "ssh"),PWildCard,PWildCard,PParen (PApp (UnQual (Ident "Just")) [PVar (Ident "host")]),PVar (Ident "port"),PVar (Ident "path")] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "host"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "port"))) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "escape"))) (Var (UnQual (Ident "path"))))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 202, srcColumn = 7}) (Ident "prefix") [PWildCard,PWildCard,PWildCard,PWildCard,PWildCard,PWildCard] Nothing (UnGuardedRhs (App (Var (UnQual (Ident "error"))) (Paren (InfixApp (Lit (String "invalid DebSource: ")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "deb")))))))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 203, srcColumn = 7}) (Ident "maybeOfString") [PLit (String "")] Nothing (UnGuardedRhs (Con (UnQual (Ident "Nothing")))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 204, srcColumn = 7}) (Ident "maybeOfString") [PVar (Ident "s")] Nothing (UnGuardedRhs (App (Con (UnQual (Ident "Just"))) (Var (UnQual (Ident "s"))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 205, srcColumn = 7}) (Ident "escape") [PVar (Ident "s")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "intercalate"))) (Lit (String "_"))) (Paren (App (App (Var (UnQual (Ident "wordsBy"))) (RightSection (QVarOp (UnQual (Symbol "=="))) (Lit (Char '/')))) (Var (UnQual (Ident "s"))))))) (BDecls [])]])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 207, srcColumn = 1}) [Ident "buildArchOfEnv"] (TyFun (TyCon (UnQual (Ident "EnvRoot"))) (TyApp (TyCon (UnQual (Ident "IO"))) (TyCon (UnQual (Ident "Arch"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 208, srcColumn = 1}) (Ident "buildArchOfEnv") [PParen (PApp (UnQual (Ident "EnvRoot")) [PVar (Ident "root")])] Nothing (UnGuardedRhs (Do [Qualifier (App (App (App (Var (UnQual (Ident "setEnv"))) (Lit (String "LOGNAME"))) (Lit (String "root"))) (Con (UnQual (Ident "True")))),Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 210, srcColumn = 8}) (PAsPat (Ident "a") (PTuple [PVar (Ident "code1"),PVar (Ident "out1"),PVar (Ident "_err1")])) (InfixApp (App (App (Var (UnQual (Ident "useEnv"))) (Var (UnQual (Ident "root")))) (Paren (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "force")))))) (QVarOp (UnQual (Symbol "$"))) (App (App (App (Var (UnQual (Ident "readProcessWithExitCode"))) (Lit (String "dpkg-architecture"))) (List [Lit (String "-qDEB_BUILD_ARCH_OS")])) (Lit (String "")))),Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 211, srcColumn = 8}) (PAsPat (Ident "b") (PTuple [PVar (Ident "code2"),PVar (Ident "out2"),PVar (Ident "_err2")])) (InfixApp (App (App (Var (UnQual (Ident "useEnv"))) (Var (UnQual (Ident "root")))) (Paren (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "force")))))) (QVarOp (UnQual (Symbol "$"))) (App (App (App (Var (UnQual (Ident "readProcessWithExitCode"))) (Lit (String "dpkg-architecture"))) (List [Lit (String "-qDEB_BUILD_ARCH_CPU")])) (Lit (String "")))),Qualifier (Case (Tuple [Var (UnQual (Ident "code1")),App (Var (UnQual (Ident "lines"))) (Var (UnQual (Ident "out1"))),Var (UnQual (Ident "code2")),App (Var (UnQual (Ident "lines"))) (Var (UnQual (Ident "out2")))]) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 213, srcColumn = 10}) (PTuple [PApp (UnQual (Ident "ExitSuccess")) [],PInfixApp (PVar (Ident "os")) (Special Cons) PWildCard,PApp (UnQual (Ident "ExitSuccess")) [],PInfixApp (PVar (Ident "cpu")) (Special Cons) PWildCard]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Con (UnQual (Ident "Binary"))) (Paren (App (Con (UnQual (Ident "ArchOS"))) (Var (UnQual (Ident "os")))))) (Paren (App (Con (UnQual (Ident "ArchCPU"))) (Var (UnQual (Ident "cpu")))))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 215, srcColumn = 10}) PWildCard (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Failure computing build architecture of build env at ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String ": ")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Tuple [Var (UnQual (Ident "a")),Var (UnQual (Ident "b"))]))))))) (BDecls [])])])) (BDecls [])],
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 228, srcColumn = 1}) [Ident "buildArchOfRoot"] (TyApp (TyCon (UnQual (Ident "IO"))) (TyCon (UnQual (Ident "Arch")))),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 229, srcColumn = 1}) (PVar (Ident "buildArchOfRoot")) Nothing (UnGuardedRhs (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 230, srcColumn = 8}) (PAsPat (Ident "a") (PTuple [PVar (Ident "code1"),PVar (Ident "out1"),PVar (Ident "_err1")])) (App (App (App (Var (UnQual (Ident "readProcessWithExitCode"))) (Lit (String "dpkg-architecture"))) (List [Lit (String "-qDEB_BUILD_ARCH_OS")])) (Lit (String ""))),Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 231, srcColumn = 8}) (PAsPat (Ident "b") (PTuple [PVar (Ident "code2"),PVar (Ident "out2"),PVar (Ident "_err2")])) (App (App (App (Var (UnQual (Ident "readProcessWithExitCode"))) (Lit (String "dpkg-architecture"))) (List [Lit (String "-qDEB_BUILD_ARCH_CPU")])) (Lit (String ""))),Qualifier (Case (Tuple [Var (UnQual (Ident "code1")),App (Var (UnQual (Ident "lines"))) (Var (UnQual (Ident "out1"))),Var (UnQual (Ident "code2")),App (Var (UnQual (Ident "lines"))) (Var (UnQual (Ident "out2")))]) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 233, srcColumn = 10}) (PTuple [PApp (UnQual (Ident "ExitSuccess")) [],PInfixApp (PVar (Ident "os")) (Special Cons) PWildCard,PApp (UnQual (Ident "ExitSuccess")) [],PInfixApp (PVar (Ident "cpu")) (Special Cons) PWildCard]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Con (UnQual (Ident "Binary"))) (Paren (App (Var (UnQual (Ident "parseArchOS"))) (Var (UnQual (Ident "os")))))) (Paren (App (Var (UnQual (Ident "parseArchCPU"))) (Var (UnQual (Ident "cpu")))))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 235, srcColumn = 10}) PWildCard (UnGuardedAlt (InfixApp (Var (UnQual (Ident "error"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Failure computing build architecture of /: ")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Tuple [Var (UnQual (Ident "a")),Var (UnQual (Ident "b"))]))))) (BDecls [])])])) (BDecls [FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 237, srcColumn = 7}) (Ident "parseArchOS") [PLit (String "any")] Nothing (UnGuardedRhs (Con (UnQual (Ident "ArchOSAny")))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 238, srcColumn = 7}) (Ident "parseArchOS") [PVar (Ident "x")] Nothing (UnGuardedRhs (App (Con (UnQual (Ident "ArchOS"))) (Var (UnQual (Ident "x"))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 239, srcColumn = 7}) (Ident "parseArchCPU") [PLit (String "any")] Nothing (UnGuardedRhs (Con (UnQual (Ident "ArchCPUAny")))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 240, srcColumn = 7}) (Ident "parseArchCPU") [PVar (Ident "x")] Nothing (UnGuardedRhs (App (Con (UnQual (Ident "ArchCPU"))) (Var (UnQual (Ident "x"))))) (BDecls [])]]),
           TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 253, srcColumn = 1}) [Symbol "+?+"] (TyFun (TyCon (UnQual (Ident "String"))) (TyFun (TyCon (UnQual (Ident "String"))) (TyCon (UnQual (Ident "String"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 254, srcColumn = 1}) (Symbol "+?+") [PVar (Ident "a"),PParen (PInfixApp (PLit (Char '_')) (Special Cons) (PVar (Ident "b")))] Nothing (UnGuardedRhs (InfixApp (Var (UnQual (Ident "a"))) (QVarOp (UnQual (Symbol "+?+"))) (Var (UnQual (Ident "b"))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 255, srcColumn = 1}) (Symbol "+?+") [PLit (String ""),PVar (Ident "b")] Nothing (UnGuardedRhs (Var (UnQual (Ident "b")))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 256, srcColumn = 1}) (Symbol "+?+") [PVar (Ident "a"),PVar (Ident "b")] Nothing (UnGuardedRhs (Case (App (Var (UnQual (Ident "last"))) (Var (UnQual (Ident "a")))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 258, srcColumn = 7}) (PLit (Char '_')) (UnGuardedAlt (InfixApp (Paren (App (Var (UnQual (Ident "init"))) (Var (UnQual (Ident "a"))))) (QVarOp (UnQual (Symbol "+?+"))) (Var (UnQual (Ident "b"))))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 259, srcColumn = 7}) PWildCard (UnGuardedAlt (InfixApp (Var (UnQual (Ident "a"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "_")) (QVarOp (UnQual (Symbol "++"))) (Var (UnQual (Ident "b")))))) (BDecls [])])) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 261, srcColumn = 1}) [Ident "wordsBy"] (TyForall Nothing [ClassA (UnQual (Ident "Eq")) [TyVar (Ident "a")]] (TyFun (TyParen (TyFun (TyVar (Ident "a")) (TyCon (UnQual (Ident "Bool"))))) (TyFun (TyList (TyVar (Ident "a"))) (TyList (TyList (TyVar (Ident "a"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 262, srcColumn = 1}) (Ident "wordsBy") [PVar (Ident "p"),PVar (Ident "s")] Nothing (UnGuardedRhs (Case (Paren (App (App (Var (UnQual (Ident "break"))) (Var (UnQual (Ident "p")))) (Var (UnQual (Ident "s"))))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 264, srcColumn = 7}) (PTuple [PVar (Ident "s'"),PList []]) (UnGuardedAlt (List [Var (UnQual (Ident "s'"))])) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 265, srcColumn = 7}) (PTuple [PVar (Ident "h"),PVar (Ident "t")]) (UnGuardedAlt (InfixApp (Var (UnQual (Ident "h"))) (QConOp (Special Cons)) (App (App (Var (UnQual (Ident "wordsBy"))) (Var (UnQual (Ident "p")))) (Paren (App (App (Var (UnQual (Ident "drop"))) (Lit (Int 1))) (Var (UnQual (Ident "t")))))))) (BDecls [])])) (BDecls [])],DataDecl (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 267, srcColumn = 1}) DataType [] (Ident "SourcesChangedAction") [] [QualConDecl (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 268, srcColumn = 5}) [] [] (ConDecl (Ident "SourcesChangedError") []),QualConDecl (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 269, srcColumn = 5}) [] [] (ConDecl (Ident "UpdateSources") []),QualConDecl (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 270, srcColumn = 5}) [] [] (ConDecl (Ident "RemoveRelease") [])] [(UnQual (Ident "Eq"),[]),(UnQual (Ident "Show"),[]),(UnQual (Ident "Data"),[]),(UnQual (Ident "Typeable"),[])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 275, srcColumn = 1}) [Ident "updateCacheSources"] (TyForall Nothing [ClassA (UnQual (Ident "MonadApt")) [TyVar (Ident "m")],ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "c")]] (TyFun (TyCon (UnQual (Ident "SourcesChangedAction"))) (TyFun (TyVar (Ident "c")) (TyApp (TyVar (Ident "m")) (TyVar (Ident "c")))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 276, srcColumn = 1}) (Ident "updateCacheSources") [PVar (Ident "sourcesChangedAction"),PVar (Ident "distro")] Nothing (UnGuardedRhs (InfixApp (App (Var (UnQual (Ident "qPutStrLn"))) (Lit (String "Updating cache sources"))) (QVarOp (UnQual (Symbol ">>"))) (Do [LetStmt (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 280, srcColumn = 11}) (PVar (Ident "baseSources")) Nothing (UnGuardedRhs (App (Var (UnQual (Ident "aptBaseSliceList"))) (Var (UnQual (Ident "distro"))))) (BDecls [])]),LetStmt (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 282, srcColumn = 11}) (PVar (Ident "dir")) Nothing (UnGuardedRhs (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "distDir"))) (Var (UnQual (Ident "distro"))))) (BDecls [])]),Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 283, srcColumn = 7}) (PVar (Ident "distExists")) (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (Var (UnQual (Ident "doesFileExist"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro"))))))),Qualifier (Case (Var (UnQual (Ident "distExists"))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 285, srcColumn = 9}) (PApp (UnQual (Ident "True")) []) (UnGuardedAlt (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 287, srcColumn = 15}) (PVar (Ident "fileSources")) (InfixApp (App (Var (UnQual (Ident "liftIO"))) (Paren (App (Var (UnQual (Ident "readFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))))))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (App (Var (UnQual (Ident "verifySourcesList"))) (Con (UnQual (Ident "Nothing")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "parseSourcesList"))))),Qualifier (Case (Tuple [InfixApp (Var (UnQual (Ident "fileSources"))) (QVarOp (UnQual (Symbol "=="))) (Var (UnQual (Ident "baseSources"))),Var (UnQual (Ident "sourcesChangedAction"))]) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 289, srcColumn = 17}) (PTuple [PApp (UnQual (Ident "True")) [],PWildCard]) (UnGuardedAlt (App (Var (UnQual (Ident "return"))) (Con (Special UnitCon)))) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 290, srcColumn = 17}) (PTuple [PApp (UnQual (Ident "False")) [],PApp (UnQual (Ident "SourcesChangedError")) []]) (UnGuardedAlt (Do [Qualifier (App (Var (UnQual (Ident "ePutStrLn"))) (Paren (InfixApp (Lit (String "The sources.list in the existing '")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "relName"))) (Paren (App (Var (UnQual (Ident "aptReleaseName"))) (Var (UnQual (Ident "distro")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "' build environment doesn't match the parameters passed to the autobuilder")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String ":\n\n")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String ":\n\n")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "fileSources")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\nRun-time parameters:\n\n")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "baseSources")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "\n")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "It is likely that the build environment in\n")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "dir"))) (QVarOp (UnQual (Symbol "++"))) (Lit (String " is invalid and should be rebuilt.")))))))))))))))),Qualifier (InfixApp (Var (UnQual (Ident "ePutStr"))) (QVarOp (UnQual (Symbol "$"))) (Lit (String "Remove it and continue (or exit)?  [y/n]: "))),Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 301, srcColumn = 23}) (PVar (Ident "result")) (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (Var (UnQual (Ident "hGetLine"))) (Var (UnQual (Ident "stdin"))))),Qualifier (Case (Var (UnQual (Ident "result"))) [Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 303, srcColumn = 25}) (PParen (PInfixApp (PLit (Char 'y')) (Special Cons) PWildCard)) (UnGuardedAlt (Do [Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (Var (UnQual (Ident "removeRecursiveSafely"))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "createDirectoryIfMissing"))) (Con (UnQual (Ident "True")))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "replaceFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))))) (Paren (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "baseSources")))))))))])) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 308, srcColumn = 25}) PWildCard (UnGuardedAlt (App (Var (UnQual (Ident "error"))) (Paren (InfixApp (Lit (String "Please remove ")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "dir"))) (QVarOp (UnQual (Symbol "++"))) (Lit (String " and restart."))))))) (BDecls [])])])) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 310, srcColumn = 17}) (PTuple [PApp (UnQual (Ident "False")) [],PApp (UnQual (Ident "RemoveRelease")) []]) (UnGuardedAlt (Do [Qualifier (InfixApp (Var (UnQual (Ident "ePutStrLn"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Removing suspect environment: ")) (QVarOp (UnQual (Symbol "++"))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (Var (UnQual (Ident "removeRecursiveSafely"))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "createDirectoryIfMissing"))) (Con (UnQual (Ident "True")))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "replaceFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))))) (Paren (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "baseSources")))))))))])) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 316, srcColumn = 17}) (PTuple [PApp (UnQual (Ident "False")) [],PApp (UnQual (Ident "UpdateSources")) []]) (UnGuardedAlt (Do [Qualifier (InfixApp (Var (UnQual (Ident "ePutStrLn"))) (QVarOp (UnQual (Symbol "$"))) (InfixApp (Lit (String "Updating environment with new sources.list: ")) (QVarOp (UnQual (Symbol "++"))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (Var (UnQual (Ident "removeFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro"))))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "replaceFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))))) (Paren (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "baseSources")))))))))])) (BDecls [])])])) (BDecls []),Alt (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 323, srcColumn = 9}) (PApp (UnQual (Ident "False")) []) (UnGuardedAlt (Do [Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "createDirectoryIfMissing"))) (Con (UnQual (Ident "True")))) (Var (UnQual (Ident "dir"))))),Qualifier (InfixApp (Var (UnQual (Ident "liftIO"))) (QVarOp (UnQual (Symbol "$"))) (App (App (Var (UnQual (Ident "replaceFile"))) (Paren (App (Var (Qual (ModuleName "Debian.Repo.AptCache") (Ident "sourcesPath"))) (Var (UnQual (Ident "distro")))))) (Paren (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "baseSources")))))))))])) (BDecls [])]),Qualifier (App (Var (UnQual (Ident "return"))) (Var (UnQual (Ident "distro"))))]))) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 330, srcColumn = 1}) [Ident "sourcePackages"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")]] (TyFun (TyVar (Ident "a")) (TyFun (TyList (TyCon (UnQual (Ident "SrcPkgName")))) (TyList (TyCon (UnQual (Ident "SourcePackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 331, srcColumn = 1}) (Ident "sourcePackages") [PVar (Ident "os"),PVar (Ident "names")] Nothing (UnGuardedRhs (InfixApp (InfixApp (App (Var (UnQual (Ident "sortBy"))) (Var (UnQual (Ident "cmp")))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "filterNames"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptSourcePackages"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os"))))) (BDecls [TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 334, srcColumn = 7}) [Ident "filterNames"] (TyFun (TyList (TyCon (UnQual (Ident "SourcePackage")))) (TyList (TyCon (UnQual (Ident "SourcePackage"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 335, srcColumn = 7}) (Ident "filterNames") [PVar (Ident "packages")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "filter"))) (Paren (InfixApp (App (App (Var (UnQual (Ident "flip"))) (Var (UnQual (Ident "elem")))) (Var (UnQual (Ident "names")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageName")))))) (Var (UnQual (Ident "packages"))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 337, srcColumn = 7}) (Ident "cmp") [PVar (Ident "p1"),PVar (Ident "p2")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "compare"))) (Var (UnQual (Ident "v2")))) (Var (UnQual (Ident "v1"))))) (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 340, srcColumn = 13}) (PVar (Ident "v1")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p1"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 341, srcColumn = 13}) (PVar (Ident "v2")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "sourcePackageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p2"))))) (BDecls [])])]])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 343, srcColumn = 1}) [Ident "binaryPackages"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")]] (TyFun (TyVar (Ident "a")) (TyFun (TyList (TyCon (UnQual (Ident "BinPkgName")))) (TyList (TyCon (UnQual (Ident "BinaryPackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 344, srcColumn = 1}) (Ident "binaryPackages") [PVar (Ident "os"),PVar (Ident "names")] Nothing (UnGuardedRhs (InfixApp (InfixApp (App (Var (UnQual (Ident "sortBy"))) (Var (UnQual (Ident "cmp")))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "filterNames"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptBinaryPackages"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os"))))) (BDecls [TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 347, srcColumn = 7}) [Ident "filterNames"] (TyFun (TyList (TyCon (UnQual (Ident "BinaryPackage")))) (TyList (TyCon (UnQual (Ident "BinaryPackage"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 348, srcColumn = 7}) (Ident "filterNames") [PVar (Ident "packages")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "filter"))) (Paren (InfixApp (App (App (Var (UnQual (Ident "flip"))) (Var (UnQual (Ident "elem")))) (Var (UnQual (Ident "names")))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "binaryPackageName")))))) (Var (UnQual (Ident "packages"))))) (BDecls [])],
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 350, srcColumn = 7}) (Ident "cmp") [PVar (Ident "p1"),PVar (Ident "p2")] Nothing (UnGuardedRhs (App (App (Var (UnQual (Ident "compare"))) (Var (UnQual (Ident "v2")))) (Var (UnQual (Ident "v1"))))) (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 353, srcColumn = 13}) (PVar (Ident "v1")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "packageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p1"))))) (BDecls []),PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 354, srcColumn = 13}) (PVar (Ident "v2")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "packageVersion"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "packageID")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "p2"))))) (BDecls [])])]])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 356, srcColumn = 1}) [Ident "getSourcePackagesBase"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")],ClassA (UnQual (Ident "MonadApt")) [TyVar (Ident "m")]] (TyFun (TyVar (Ident "a")) (TyApp (TyVar (Ident "m")) (TyList (TyCon (UnQual (Ident "SourcePackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 357, srcColumn = 1}) (Ident "getSourcePackagesBase") [PVar (Ident "os")] Nothing (UnGuardedRhs (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 358, srcColumn = 8}) (PVar (Ident "indexes")) (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (App (Var (UnQual (Ident "sliceIndexes"))) (Var (UnQual (Ident "os")))))) (Paren (InfixApp (InfixApp (Var (UnQual (Ident "slices"))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "sourceSlices"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptBaseSliceList"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os")))))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat"))))),Qualifier (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 359, srcColumn = 14}) [PTuple [PVar (Ident "repo"),PVar (Ident "rel"),PVar (Ident "index")]] (App (App (App (App (Var (UnQual (Ident "sourcePackagesOfCachedIndex"))) (Var (UnQual (Ident "os")))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "rel")))) (Var (UnQual (Ident "index"))))))) (Var (UnQual (Ident "indexes")))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat")))))])) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 361, srcColumn = 1}) [Ident "getSourcePackagesBuild"] (TyForall Nothing [ClassA (UnQual (Ident "AptBuildCache")) [TyVar (Ident "a")],ClassA (UnQual (Ident "MonadApt")) [TyVar (Ident "m")]] (TyFun (TyVar (Ident "a")) (TyApp (TyVar (Ident "m")) (TyList (TyCon (UnQual (Ident "SourcePackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 362, srcColumn = 1}) (Ident "getSourcePackagesBuild") [PVar (Ident "os")] Nothing (UnGuardedRhs (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 363, srcColumn = 8}) (PVar (Ident "indexes")) (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (App (Var (UnQual (Ident "sliceIndexes"))) (Var (UnQual (Ident "os")))))) (Paren (InfixApp (InfixApp (Var (UnQual (Ident "slices"))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "sourceSlices"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptSliceList"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os")))))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat"))))),Qualifier (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 364, srcColumn = 14}) [PTuple [PVar (Ident "repo"),PVar (Ident "rel"),PVar (Ident "index")]] (App (App (App (App (Var (UnQual (Ident "sourcePackagesOfCachedIndex"))) (Var (UnQual (Ident "os")))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "rel")))) (Var (UnQual (Ident "index"))))))) (Var (UnQual (Ident "indexes")))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat")))))])) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 366, srcColumn = 1}) [Ident "getBinaryPackagesBase"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "a")],ClassA (UnQual (Ident "MonadApt")) [TyVar (Ident "m")]] (TyFun (TyVar (Ident "a")) (TyApp (TyVar (Ident "m")) (TyList (TyCon (UnQual (Ident "BinaryPackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 367, srcColumn = 1}) (Ident "getBinaryPackagesBase") [PVar (Ident "os")] Nothing (UnGuardedRhs (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 368, srcColumn = 8}) (PVar (Ident "indexes")) (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (App (Var (UnQual (Ident "sliceIndexes"))) (Var (UnQual (Ident "os")))))) (Paren (InfixApp (InfixApp (Var (UnQual (Ident "slices"))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "binarySlices"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptBaseSliceList"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os")))))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat"))))),Qualifier (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 369, srcColumn = 14}) [PTuple [PVar (Ident "repo"),PVar (Ident "rel"),PVar (Ident "index")]] (App (App (App (App (Var (UnQual (Ident "binaryPackagesOfCachedIndex"))) (Var (UnQual (Ident "os")))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "rel")))) (Var (UnQual (Ident "index"))))))) (Var (UnQual (Ident "indexes")))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat")))))])) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 371, srcColumn = 1}) [Ident "getBinaryPackagesBuild"] (TyForall Nothing [ClassA (UnQual (Ident "AptBuildCache")) [TyVar (Ident "a")],ClassA (UnQual (Ident "MonadApt")) [TyVar (Ident "m")]] (TyFun (TyVar (Ident "a")) (TyApp (TyVar (Ident "m")) (TyList (TyCon (UnQual (Ident "BinaryPackage"))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 372, srcColumn = 1}) (Ident "getBinaryPackagesBuild") [PVar (Ident "os")] Nothing (UnGuardedRhs (Do [Generator (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 373, srcColumn = 8}) (PVar (Ident "indexes")) (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (App (Var (UnQual (Ident "sliceIndexes"))) (Var (UnQual (Ident "os")))))) (Paren (InfixApp (InfixApp (Var (UnQual (Ident "slices"))) (QVarOp (UnQual (Symbol "."))) (InfixApp (Var (UnQual (Ident "binarySlices"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "aptSliceList"))))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os")))))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat"))))),Qualifier (InfixApp (App (App (Var (UnQual (Ident "mapM"))) (Paren (Lambda (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 374, srcColumn = 14}) [PTuple [PVar (Ident "repo"),PVar (Ident "rel"),PVar (Ident "index")]] (App (App (App (App (Var (UnQual (Ident "binaryPackagesOfCachedIndex"))) (Var (UnQual (Ident "os")))) (Var (UnQual (Ident "repo")))) (Var (UnQual (Ident "rel")))) (Var (UnQual (Ident "index"))))))) (Var (UnQual (Ident "indexes")))) (QVarOp (UnQual (Symbol ">>="))) (InfixApp (Var (UnQual (Ident "return"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "concat")))))])) (BDecls [])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 377, srcColumn = 1}) [Ident "runAptGet"] (TyForall Nothing [ClassA (UnQual (Ident "PkgName")) [TyVar (Ident "n")],ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "t")]] (TyFun (TyVar (Ident "t")) (TyFun (TyCon (UnQual (Ident "FilePath"))) (TyFun (TyCon (UnQual (Ident "String"))) (TyFun (TyList (TyTuple Boxed [TyVar (Ident "n"),TyApp (TyCon (UnQual (Ident "Maybe"))) (TyCon (UnQual (Ident "DebianVersion")))])) (TyApp (TyCon (UnQual (Ident "IO"))) (TyCon (Special UnitCon)))))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 378, srcColumn = 1}) (Ident "runAptGet") [PVar (Ident "os"),PVar (Ident "dir"),PVar (Ident "command"),PVar (Ident "packages")] Nothing (UnGuardedRhs (InfixApp (InfixApp (App (App (Var (UnQual (Ident "createDirectoryIfMissing"))) (Con (UnQual (Ident "True")))) (Var (UnQual (Ident "dir")))) (QVarOp (UnQual (Symbol ">>"))) (App (App (Var (UnQual (Ident "runProcessF"))) (Paren (App (Var (UnQual (Ident "shell"))) (Var (UnQual (Ident "cmd")))))) (Var (Qual (ModuleName "L") (Ident "empty"))))) (QVarOp (UnQual (Symbol ">>"))) (App (Var (UnQual (Ident "return"))) (Con (Special UnitCon))))) (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 381, srcColumn = 7}) (PVar (Ident "cmd")) Nothing (UnGuardedRhs (Paren (App (App (Var (UnQual (Ident "intercalate"))) (Lit (String " "))) (Paren (InfixApp (Lit (String "cd")) (QConOp (Special Cons)) (InfixApp (Var (UnQual (Ident "dir"))) (QConOp (Special Cons)) (InfixApp (Lit (String "&&")) (QConOp (Special Cons)) (InfixApp (Lit (String "apt-get")) (QConOp (Special Cons)) (InfixApp (App (Var (UnQual (Ident "aptOpts"))) (Var (UnQual (Ident "os")))) (QConOp (Special Cons)) (InfixApp (Var (UnQual (Ident "command"))) (QConOp (Special Cons)) (App (App (Var (UnQual (Ident "map"))) (Var (UnQual (Ident "formatPackage")))) (Var (UnQual (Ident "packages")))))))))))))) (BDecls []),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 382, srcColumn = 7}) (Ident "formatPackage") [PTuple [PVar (Ident "name"),PApp (UnQual (Ident "Nothing")) []]] Nothing (UnGuardedRhs (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "name"))))))) (BDecls []),Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 383, srcColumn = 7}) (Ident "formatPackage") [PTuple [PVar (Ident "name"),PApp (UnQual (Ident "Just")) [PVar (Ident "version")]]] Nothing (UnGuardedRhs (InfixApp (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "pretty"))) (Var (UnQual (Ident "name")))))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "=")) (QVarOp (UnQual (Symbol "++"))) (App (Var (UnQual (Ident "show"))) (Paren (App (Var (UnQual (Ident "prettyDebianVersion"))) (Var (UnQual (Ident "version"))))))))) (BDecls [])]])],TypeSig (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 385, srcColumn = 1}) [Ident "aptOpts"] (TyForall Nothing [ClassA (UnQual (Ident "AptCache")) [TyVar (Ident "t")]] (TyFun (TyVar (Ident "t")) (TyCon (UnQual (Ident "String"))))),
           FunBind [Match (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 386, srcColumn = 1}) (Ident "aptOpts") [PVar (Ident "os")] Nothing (UnGuardedRhs (Paren (InfixApp (Lit (String " -o=Dir::State::status=")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/var/lib/dpkg/status")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String " -o=Dir::State::Lists=")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/var/lib/apt/lists")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String " -o=Dir::Cache::Archives=")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/var/cache/apt/archives")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String " -o=Dir::Etc::SourceList=")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String "/etc/apt/sources.list")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Lit (String " -o=Dir::Etc::SourceParts=")) (QVarOp (UnQual (Symbol "++"))) (InfixApp (Var (UnQual (Ident "root"))) (QVarOp (UnQual (Symbol "++"))) (Lit (String "/etc/apt/sources.list.d")))))))))))))))))) (BDecls [PatBind (SrcLoc {srcFilename = "<unknown>.hs", srcLine = 392, srcColumn = 11}) (PVar (Ident "root")) Nothing (UnGuardedRhs (InfixApp (InfixApp (Var (UnQual (Ident "rootPath"))) (QVarOp (UnQual (Symbol "."))) (Var (UnQual (Ident "rootDir")))) (QVarOp (UnQual (Symbol "$"))) (Var (UnQual (Ident "os"))))) (BDecls [])])]])
#endif
