{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -Wall #-}
module Language.Haskell.Imports.Clean
    ( cleanImports
    , cleanBuildImports
    , test1
    ) where

import Control.Applicative ((<$>), (<*>))
import Control.Applicative.Error (Failing(..))
import Control.Exception (catch, SomeException, try)
import Data.Char (toLower)
import Data.Function (on)
import Data.List (groupBy, intercalate, isSuffixOf, nub, sortBy)
import Data.Maybe (catMaybes)
import Data.Monoid ((<>))
import Distribution.PackageDescription (Executable(modulePath), PackageDescription(executables))
import Distribution.Simple.LocalBuildInfo (LocalBuildInfo, localPkgDescr)
import Language.Haskell.Exts.Extension (Extension(PackageImports))
import Language.Haskell.Exts.Syntax (ImportDecl(importSpecs), ImportSpec, Module(..))
import Language.Haskell.Exts.Parser (ParseMode(extensions))
import Language.Haskell.Exts (defaultParseMode, parseFile, parseFileWithMode, ParseResult(..))
import Language.Haskell.Imports.Common (importsSpan, replaceFile, replaceImports, specName)
import System.Directory (doesFileExist, getDirectoryContents, removeFile)
import System.Exit (ExitCode(..))
import System.IO (hPutStrLn, stderr)
import System.Process (readProcessWithExitCode, showCommandForUser)

test1 :: IO ()
test1 = cleanImports True "Language/Haskell/Imports/Clean.hs"

-- | To use this function you must first make sure...
--    1. There are up-to-date .imports files in the top directory, generated when
--       the -ddump-minimal-imports flag is added to ghc-options.
--    2. The first import must be preceded by a blank line
--    3. The last import must be followed by a blank line
--    4. No imports commented out with {- -} appear anywhere
-- It will not operate on files without an explicit export list or on
-- files with no declarations.  To use it do the following:
--    1. Set the postConf value in Setup  to:
--         @\ _ _ _ lbi -> cleanDumpedImports lbi@
--    1. Add -ddump-minimal-imports to the GHC-Options value in your
--       cabal file.  Then do a Setup build to generate the .imports
--       files.
--    2. Next do a Setup configure to update the source files
--    3. Do another Setup build to make sure everything still builds.
--       If there are problems with a module, either edit the source
--       file or move the backup file (suffix ~) back to where the
--       original was.
-- Bug: it removes declarations like "import Prelude hiding (last)"
cleanBuildImports :: Bool -> LocalBuildInfo -> IO ()
cleanBuildImports dryRun lbi = cleanDumpedImports dryRun (map modulePath (executables (localPkgDescr lbi)))

cleanDumpedImports :: Bool -> [FilePath] -> IO ()
cleanDumpedImports dryRun exePaths =
    getDirectoryContents "." >>= mapM_ doImports
    where
      doImports importsPath | not (isSuffixOf ".imports" importsPath) = return ()
      doImports importsPath =
          do let sourcePath = importsPathToSourcePath importsPath
             result <- doesFileExist sourcePath >>= return . findSourcePath exePaths sourcePath
             case result of
               Failure messages -> putStrLn (intercalate ", " messages)
               Success sourcePath' ->
                   try (checkImports dryRun importsPath sourcePath') >>=
                   either (\ (e :: SomeException) -> putStrLn (show e)) return

-- | Clean up the imports of a source file.
cleanImports :: Bool -> FilePath -> IO ()
cleanImports dryRun sourcePath =
    (dump >> replace >> cleanup) `catch` (\ (e :: SomeException) -> hPutStrLn stderr (show e))
    where
      importsPath = (sourcePathToImportsPath sourcePath)

      dump = let cmd = "ghc"
                 args = ["--make", "-ddump-minimal-imports", sourcePath] in
             readProcessWithExitCode cmd args "" >>= \ (code, _out, err) ->
             case code of
               ExitSuccess -> return ()
               ExitFailure _ -> error (sourcePath ++ ": compile failed\n " ++ showCommandForUser cmd args ++ " ->\n" ++ err)

      replace = checkImports dryRun importsPath sourcePath

      cleanup = removeFile (dropSuffix ".hs" sourcePath <> ".o") >>
                removeFile (dropSuffix ".hs" sourcePath <> ".hi") >>
                removeFile importsPath

-- | Parse the import list generated by GHC, parse the original source
-- file, and if all goes well insert the new imports into the old
-- source file.
checkImports :: Bool -> FilePath -> FilePath -> IO ()
checkImports dryRun importsPath sourcePath =
    do result <- parseFileWithMode (defaultParseMode {extensions = [PackageImports] ++ extensions defaultParseMode}) importsPath
       case result of
         ParseOk newImports ->
             do source <- try ((,) <$> parseFile sourcePath <*> readFile sourcePath)
                either (\ (e :: SomeException) -> error (sourcePath ++ ": " ++ show e))
                       (uncurry (updateSource dryRun newImports sourcePath)) source
         _ -> error ("Parse of imports failed: " ++ show result)

importsPathToSourcePath :: String -> FilePath
importsPathToSourcePath name = map (\ c -> if c == '.' then '/' else c) (dropSuffix ".imports" name) <> ".hs"

sourcePathToImportsPath :: FilePath -> FilePath
sourcePathToImportsPath sourcePath = map (\ c -> if c == '/' then '.' else c) (dropSuffix ".hs" sourcePath) <> ".imports"

-- | If all the parsing went well and the new imports differ from the
-- old, update the source file with the new imports.
updateSource :: Bool -> Module -> FilePath -> ParseResult Module -> String -> IO ()
updateSource _ _ sourcePath (ParseOk (Module _ _ _ _ Nothing _ _)) _ =
    error ("Invalid source file " ++ sourcePath ++ ": Won't modify source file with no explicit export list")
updateSource _ _ sourcePath (ParseOk (Module _ _ _ _ _ _ [])) _ =
    error ("Invalid source file " ++ sourcePath ++ ": Won't modify source file with no declarations")
updateSource dryRun (Module _ _ _ _ _ newImports _) sourcePath (ParseOk m@(Module _ _ _ _ _ oldImports _)) sourceText =
    maybe (putStrLn (sourcePath ++ ": no changes"))
          (\ text ->
               putStrLn (sourcePath ++ ": replacing imports") >>
               replaceFile dryRun (++ "~") sourcePath text)
          (replaceImports oldImports (fixNewImports newImports) sourceText (importsSpan m))
updateSource _ _ sourcePath (ParseFailed _ _) _ = error (sourcePath ++ ": could not parse")

-- | Final touch-ups - sort and merge similar imports.
fixNewImports :: [ImportDecl] -> [ImportDecl]
fixNewImports imports =
    map mergeDecls (groupBy ((==) `on` noSpecs) (sortBy (compare `on` noSpecs) imports))
    where
      noSpecs :: ImportDecl -> ImportDecl
      noSpecs x = x {importSpecs = fmap (\ (flag, _) -> (flag, [])) (importSpecs x)}
      mergeDecls :: [ImportDecl] -> ImportDecl
      mergeDecls xs@(x : _) = x {importSpecs = mergeSpecs (catMaybes (map importSpecs xs))}
      mergeDecls [] = error "mergeDecls"
      mergeSpecs :: [(Bool, [ImportSpec])] -> Maybe (Bool, [ImportSpec])
      mergeSpecs (x : xs) = Just (fst x, sortBy compareSpecs (nub (concat (snd x : map snd xs))))
      mergeSpecs [] = error "mergeSpecs"

compareSpecs :: ImportSpec -> ImportSpec -> Ordering
compareSpecs a b =
    case compare (map toLower $ specName a) (map toLower $ specName b) of
      EQ -> compare a b
      x -> x

findSourcePath :: [FilePath] -> FilePath -> Bool -> Failing FilePath
findSourcePath exePaths path exists =
    case (exists, matches) of
      (True, []) -> Success path
      (True, _) -> Success path -- dubious
      (False, [x]) -> Success x
      (False, []) -> Failure ["Can't find " ++ path]
      (False, xs) -> Failure ["Multiple executables named " ++ path ++ ": " ++ show xs]
    where
      matches = filter (isSuffixOf ('/' : path)) exePaths

dropSuffix :: Eq a => [a] -> [a] -> [a]
dropSuffix suf x = if isSuffixOf suf x then take (length x - length suf) x else x

-- dropPrefix :: Eq a => [a] -> [a] -> [a]
-- dropPrefix pre x = if isPrefixOf pre x then drop (length x) x else x
