{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -Wall #-}
module Language.Haskell.Imports.Clean
    ( cleanImports
    , cleanDumpedImports
    ) where

import Control.Applicative ((<$>), (<*>))
import Control.Applicative.Error (Failing(..))
import Control.Exception (SomeException, try, catch, throw)
import Data.List (isSuffixOf, isInfixOf, tails, isPrefixOf, findIndex, intercalate)
import Data.Monoid ((<>))
import Debug.Trace (trace)
import Distribution.PackageDescription (PackageDescription(executables), Executable(modulePath))
import Distribution.Simple.LocalBuildInfo (LocalBuildInfo, localPkgDescr)
import Language.Haskell.Exts.Annotated.Syntax ()
import Language.Haskell.Exts.Extension (Extension(PackageImports))
import Language.Haskell.Exts.Syntax (Module(..), ImportDecl(..), ImportSpec(..), ModuleName(ModuleName), Name(Ident, Symbol))
import Language.Haskell.Exts.Parser (ParseMode(..))
import Language.Haskell.Exts.Pretty (prettyPrintWithMode, defaultMode, PPHsMode(..), PPLayout(..))
import Language.Haskell.Exts (ParseResult(..), parseFile, parseFileWithMode, defaultParseMode)
import System.Directory (getDirectoryContents, removeFile, doesFileExist, renameFile)
import System.Exit (ExitCode(..))
import System.IO (hPutStrLn, stderr)
import System.IO.Error (isDoesNotExistError)
import System.Process (readProcessWithExitCode)

type FQID = String -- ^ Fully qualified identifier - e.g. Language.Haskell.Imports.Clean.cleanImports

-- | Clean up the imports of a source file.
cleanImports :: [(FQID, FQID)] -> FilePath -> IO ()
cleanImports moves sourcePath =
    (dump >> replace >> cleanup) `catch` (\ (e :: SomeException) -> hPutStrLn stderr (show e))
    where
      importsPath = (sourcePathToImportsPath sourcePath)
      cmd = "ghc"
      args = ["-S", "-ddump-minimal-imports", sourcePath]
      dump :: IO ()
      dump = readProcessWithExitCode cmd args "" >>= \ (code, _out, _err) ->
             case code of
               ExitSuccess -> return ()
               ExitFailure _ -> error (sourcePath ++ ": compile failed")
      replace :: IO ()
      replace = checkImports moves importsPath sourcePath
      cleanup :: IO ()
      cleanup = removeFile importsPath

-- | To use this function you must first make sure...
--    1. There are up-to-date .imports files in the top directory, generated when
--       the -ddump-minimal-imports flag is added to ghc-options.
--    2. The first import must be preceded by a blank line
--    3. The last import must be followed by a blank line
--    4. No imports commented out with {- -} appear anywhere
-- It will not operate on files without an explicit export list or on
-- files with no declarations.  To use it do the following:
--    1. Set the postConf value in Setup  to:
--         @\ _ _ _ lbi -> cleanDumpedImports lbi@
--    1. Add -ddump-minimal-imports to the GHC-Options value in your
--       cabal file.  Then do a Setup build to generate the .imports
--       files.
--    2. Next do a Setup configure to update the source files
--    3. Do another Setup build to make sure everything still builds.
--       If there are problems with a module, either edit the source
--       file or move the backup file (suffix ~) back to where the
--       original was.
-- Bug: it removes declarations like "import Prelude hiding (last)"
cleanDumpedImports :: LocalBuildInfo -> IO ()
cleanDumpedImports lbi = cleanDumpedImports' (map modulePath (executables (localPkgDescr lbi)))

cleanDumpedImports' :: [FilePath] -> IO ()
cleanDumpedImports' exePaths =
    getDirectoryContents "." >>= mapM_ doImports
    where
      doImports importsPath | not (isSuffixOf ".imports" importsPath) = return ()
      doImports importsPath =
          do result <- findSourcePath exePaths (importsPathToSourcePath importsPath)
             case result of
               Failure messages -> putStrLn (intercalate ", " messages)
               Success sourcePath -> checkImports [] importsPath sourcePath

-- | Parse the import list generated by GHC, parse the original source
-- file, and if all goes well insert the new imports into the old
-- source file.
checkImports :: [(FQID, FQID)] -> FilePath -> FilePath -> IO ()
checkImports moves importsPath sourcePath =
    do result <- parseFileWithMode (defaultParseMode {extensions = [PackageImports] ++ extensions defaultParseMode}) importsPath
       case result of
         ParseOk newImports ->
             do source <- try ((,) <$> parseFile sourcePath <*> readFile sourcePath)
                either (\ (e :: SomeException) -> error (sourcePath ++ ": " ++ show e)) (uncurry (updateSource (doMoves moves newImports) sourcePath)) source
         _ -> error ("Parse of imports failed: " ++ show result)

doMoves :: [(FQID, FQID)] -> Module -> Module
doMoves moves (Module loc name pragmas warn exports imports decls) =
    (Module loc name pragmas warn exports (map doMoves' imports) decls)
    where
      doMoves' :: ImportDecl -> ImportDecl
      doMoves' imp = foldr moveImport imp moves
      moveImport :: (FQID, FQID) -> ImportDecl -> ImportDecl
      moveImport _ decl@(ImportDecl {importSpecs = Nothing}) = decl
      moveImport move decl@(ImportDecl {importModule = m, importSpecs = Just (flag, specs)}) =
          decl {importSpecs = Just (flag, map (moveSpec move m) specs)}
      -- If we see the src, remove it and return dst.  If we are in
      -- the dst module add the dst.
      moveSpec :: (FQID, FQID) -> ModuleName -> ImportSpec -> ImportSpec
      moveSpec (src, dst) (ModuleName m) x@(IVar (Ident n)) =
          if m ++ "." ++ n == src then IVar (Ident (dropPrefix (m ++ ".") dst)) else x
      moveSpec (src, dst) (ModuleName m) x@(IVar (Symbol n)) =
          if m ++ "." ++ n == src then IVar (Ident (dropPrefix (m ++ ".") dst)) else x
      moveSpec move m x@(IAbs _n) = trace ("moveSpec " ++ show move ++ " " ++ show m ++ " " ++ show x) x
      moveSpec move m x@(IThingAll _n) = trace ("moveSpec " ++ show move ++ " " ++ show m ++ " " ++ show x) x
      moveSpec move m x@(IThingWith _n _cn) = trace ("moveSpec " ++ show move ++ " " ++ show m ++ " " ++ show x) x

importsPathToSourcePath :: String -> FilePath
importsPathToSourcePath name = map (\ c -> if c == '.' then '/' else c) (dropSuffix ".imports" name) <> ".hs"

sourcePathToImportsPath :: FilePath -> FilePath
sourcePathToImportsPath sourcePath = map (\ c -> if c == '/' then '.' else c) (dropSuffix ".hs" sourcePath) <> ".imports"

findSourcePath :: [FilePath] -> FilePath -> IO (Failing FilePath)
findSourcePath exePaths path = doesFileExist path >>= return . findSourcePath' exePaths path

-- | If all the parsing went well and the new imports differ from the
-- old, update the source file with the new imports.
updateSource :: Module -> FilePath -> ParseResult Module -> String -> IO ()
updateSource _ sourcePath (ParseOk (Module _ _ _ _ Nothing _ _)) _ =
    error ("Invalid source file " ++ sourcePath ++ ": Won't modify source file with no explicit export list")
updateSource _ sourcePath (ParseOk (Module _ _ _ _ _ _ [])) _ =
    error ("Invalid source file " ++ sourcePath ++ ": Won't modify source file with no declarations")
updateSource newImports@(Module a b c d e _ f) sourcePath (ParseOk (Module _ _ _ _ _ oldImports' _)) sourceText =
    if oldPretty /= newPretty -- the ImportDecls won't match because they have different SrcLoc values
    then hPutStrLn stderr (sourcePath ++ ": replacing imports -\n" ++ oldPretty ++ "\n ->\n" ++ newPretty) >> replaceImports newImports sourceText sourcePath
    else putStrLn (sourcePath ++ ": no changes")
    where
      oldPretty = pretty (Module a b c d e oldImports' f)
      newPretty = pretty newImports
updateSource _ sourcePath (ParseFailed _ _) _ = error (sourcePath ++ ": could not parse")

pretty :: Module -> String
pretty = prettyPrintWithMode (defaultMode {layout = PPInLine})

replaceImports :: Module -> String -> FilePath -> IO ()
replaceImports imports sourceText sourcePath =
    maybe (return ()) (\ text -> replaceFile (++ "~") sourcePath text) newSourceText
    where
      newSourceText = replaceImports' sourceText importsText
      importsText = munge $ pretty imports
      -- Strip of the module declaration line, the leading spaces, and the terminating semicolons
      munge = unlines . map (init . tail . tail) . tail . lines

-- | If backup is the identity function you're going to have a bad time.
replaceFile :: (FilePath -> FilePath) -> FilePath -> String -> IO ()
replaceFile backup path text =
    remove >> rename >> write
    where
      remove = removeFile (backup path) `catch` (\ (e :: IOError) -> if isDoesNotExistError e then return () else throw e)
      rename = renameFile path (backup path) `catch` (\ (e :: IOError) -> if isDoesNotExistError e then return () else throw e)
      write = writeFile path text

findSourcePath' :: [FilePath] -> FilePath -> Bool -> Failing FilePath
findSourcePath' exePaths path exists =
    case (exists, matches) of
      (True, []) -> Success path
      (True, _) -> Success path -- dubious
      (False, [x]) -> Success x
      (False, []) -> Failure ["Can't find " ++ path]
      (False, xs) -> Failure ["Multiple executables named " ++ path ++ ": " ++ show xs]
    where
      matches = filter (isSuffixOf ('/' : path)) exePaths

-- Assume the import section begins with a blank line and then
-- "import" and ends with the a blank line following "\nimport"
replaceImports' :: String -> String -> Maybe String
replaceImports' text imports =
    let start = findIndex (isPrefixOf "\n\nimport ") (tails text)
        (prefix, rest) = splitAt (maybe 0 id start + 1) text
        final = maybe 1 (+ 1) (findIndex (not . isInfixOf "\nimport ") (tails rest))
        suffix = drop final rest
        after = fmap (+ 2) (findIndex (isPrefixOf "\n\n") (tails suffix)) in
    case after of
      Nothing -> Nothing
      Just after' ->
          let suffix' = drop after' suffix
              text' = prefix ++ "\n" ++ imports ++ "\n" ++ suffix' in
          if text /= text'
          then Just text'
          else Nothing

dropSuffix :: Eq a => [a] -> [a] -> [a]
dropSuffix suf x =
    if isSuffixOf suf x then take (length x - length suf) x else x

dropPrefix :: Eq a => [a] -> [a] -> [a]
dropPrefix pre x =
    if isPrefixOf pre x then drop (length x) x else x
